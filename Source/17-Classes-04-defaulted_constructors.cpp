#include <iostream>

const double PI = 3.14;

class Cylinder1 {
    // Class with explicitly defined default constructor
    public:
        double radius {1.0};
        double height {1.0};
    public:
        Cylinder1() = default; // Default/empty constructor
        
        Cylinder1 (double radius_param, double height_param) {
            radius = radius_param;
            height = height_param;
        }
        
        double volume() {
            return PI * radius * radius * height;
        }
};

class Cylinder2 {
    // Class without explicitly defined default constructor.
    public:
        double radius {1.0};
        double height {1.0};
    public:
        
        Cylinder2 (double radius_param, double height_param) {
            radius = radius_param;
            height = height_param;
        }
        
        double volume() {
            return PI * radius * radius * height;
        }
};

class Cylinder3 {
    // Class without any constructors
    public:
        double radius {1.0};
        double height {1.0};
    public:

        double volume() {
            return PI * radius * radius * height;
        }
};

int main () {

    /*
    Defaulted constructors (20:53:17):
    The syntax used to let the compiler generate a default empty constructor for you.
    Syntax:
    <constructor_name>() = default;
    Remeber: <constructor_name> is the <class_name>.

    Previously we said that if a constructor is not explicitly specified the compiler auto-generates its own default empty constructor. So then, what is the importance of explicitly commanding the compiler to generate a default constructor?
    If the compiler encounters any user specified constructor, then it will abandon creating a default constructor, even if its needed. To bypass this behaviour, i.e. to allow th compiler to create a default constructor if its need, we use the 
    <constructor_name> = default; command. 
    */

   // Cylinder1 contains constructor Cylinder1 (double radius_param, double height_param), so object c1 can be constructed.
   Cylinder1 c1{2.3,4.5};
   // Cylinder2 contains constructor Cylinder2 (double radius_param, double height_param), so object c2 can be constructed. 
   Cylinder2 c2{2.3,4.5};

   // Cylinder1 contains constructor Cylinder1() = defaule;, so object c3 can be constructed.
   Cylinder1 c3{}; // same as Cyliner1 c3;
   
   // Cylinder2 does NOT contain constructor Cylinder2() = default;, so object c4 can NOT be constructed. If Cylinder2 did not contain Cylinder2 (double radius_param, double height_param), the compiler would have auto generated Cylinder2() = default, and things would have been fine. But since, we've manually defined atleast one constructor  [Cylinder2 (double radius_param, double height_param)], the compiler also expects the default constructor to be explicitly defined if we want to use it.
   
   //Cylinder2 c4{}; -> doesnt work as there is no matching constructor in the class and the compiler doesn't autogen a default constructor (because to autogen a default constructor the class must not contain any manually defined constructors). 

    Cylinder3 c5; // This works as class Cylinder3 does NOT contain any constructors. Therefore, when the compiler encounters this initialization, it will automatically generate the default constructor Cylinder3() = defaul;. If Cylinder3 contained any manually defined constructors, then the default constructor would not have been auto-generated by the compiler.

    /*
    //Remember:    
    Cylinder3() = default;
    is shorthand for
    Cylinder3() {} //emply constructor - emply parameter list and empty body

    Also,
    for constructors to be call from main(), they must be public. If they're private neither the default nor any of the other types of constructors will be available in main(). Any attempt to then create an object of the class in main(), will cause a compiler error.

    */

    return 0;

}
